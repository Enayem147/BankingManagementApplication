

-- TAO DATABASE DBMS_BANKING
CREATE DATABASE DBMS_BANKING;

USE DBMS_BANKING;
ALTER SCHEMA DBMS_BANKING  DEFAULT CHARACTER SET utf8 ;
SET SQL_SAFE_UPDATES = 0;

CREATE TABLE QUANTRI
(
	QT_ID VARCHAR(10) NOT NULL,
	QT_MK VARCHAR(20) NOT NULL,
	PRIMARY KEY(QT_ID)
);


CREATE TABLE KHACHHANG
(
	KH_CIF INT AUTO_INCREMENT NOT NULL,
	KH_HOTEN VARCHAR(100) NOT NULL,
	KH_CMND VARCHAR(9) NOT NULL,
	KH_NGAYSINH VARCHAR(20) NOT NULL,
	KH_DIACHI VARCHAR(100),
	PRIMARY KEY(KH_CIF),
	UNIQUE(KH_CMND)
);

ALTER TABLE KHACHHANG AUTO_INCREMENT = 10000000;



CREATE TABLE LOAITAIKHOAN 
(
	LTK_ID INT AUTO_INCREMENT,
	LTK_TEN VARCHAR(50) NOT NULL,
	PRIMARY KEY(LTK_ID)
);


CREATE TABLE CHINHANH
(
	CN_ID INT AUTO_INCREMENT,
	CN_TEN VARCHAR(50) NOT NULL,
	PRIMARY KEY(CN_ID)
);

CREATE TABLE TAIKHOAN
(
	TK_ID   INT AUTO_INCREMENT NOT NULL,
	TK_STK  VARCHAR(20) NOT NULL,
	TK_PIN  VARCHAR(6) NOT NULL,
	TK_SODU DECIMAL NOT NULL,
	KH_CIF  INT NOT NULL,
	LTK_ID  INT NOT NULL,
	CN_ID   INT NOT NULL,
	PRIMARY KEY(TK_ID),
	CONSTRAINT FK_TK_KH FOREIGN KEY (KH_CIF) REFERENCES KHACHHANG(KH_CIF),
	CONSTRAINT FK_TK_CN FOREIGN KEY (CN_ID) REFERENCES CHINHANH(CN_ID),
	CONSTRAINT FK_TK_LTK FOREIGN KEY (LTK_ID) REFERENCES LOAITAIKHOAN(LTK_ID)
);
ALTER TABLE TAIKHOAN AUTO_INCREMENT 100000000;

-- them du lieu
INSERT INTO QUANTRI VALUES('admin','admin');

INSERT INTO CHINHANH(CN_TEN) VALUES('Hồ Chí Minh');
INSERT INTO CHINHANH(CN_TEN) VALUES('Cần Thơ');
INSERT INTO CHINHANH(CN_TEN) VALUES('Sóc Trăng');
INSERT INTO CHINHANH(CN_TEN) VALUES('Đồng Tháp');
INSERT INTO CHINHANH(CN_TEN) VALUES('Hậu Giang');
INSERT INTO CHINHANH(CN_TEN) VALUES('Bạc Liêu');
INSERT INTO CHINHANH(CN_TEN) VALUES('Tiền Giang');

INSERT INTO loaitaikhoan(LTK_TEN) VALUES('Thẻ ATM');
INSERT INTO loaitaikhoan(LTK_TEN) VALUES('Thẻ VISA / Mastercard');
INSERT INTO loaitaikhoan(LTK_TEN) VALUES('Thẻ ghi nợ');


INSERT INTO KHACHHANG(KH_HOTEN,KH_CMND,KH_NGAYSINH,KH_DIACHI)
	VALUES ('Trường Nam','365029365','09/11/1997','Số 1 , Lý tự trọng , Cần thơ');
INSERT INTO KHACHHANG(KH_HOTEN,KH_CMND,KH_NGAYSINH,KH_DIACHI)
	VALUES ('Oách Xà Lách','365029364','19/08/1999','Ở trên sao hỏa');
INSERT INTO KHACHHANG(KH_HOTEN,KH_CMND,KH_NGAYSINH,KH_DIACHI)
	VALUES ('Dã man con Ngan','365029363','05/08/1994','Sóc Trăng');
INSERT INTO KHACHHANG(KH_HOTEN,KH_CMND,KH_NGAYSINH,KH_DIACHI)
	VALUES ('Trương Ngọc Nhã Uyên','365029366','22/08/1995','Thành phố Hồ Chí Minh');

INSERT INTO TAIKHOAN (TK_STK,TK_PIN,TK_SODU,KH_CIF,LTK_ID,CN_ID)
	VALUES('021000000001','123566',1000000,'10000000',2,2);
INSERT INTO TAIKHOAN (TK_STK,TK_PIN,TK_SODU,KH_CIF,LTK_ID,CN_ID)
	VALUES('031000000002','999566',1000000,'10000000',1,3);
INSERT INTO TAIKHOAN (TK_STK,TK_PIN,TK_SODU,KH_CIF,LTK_ID,CN_ID)
	VALUES('041000000101','190234',1000000,'10000001',3,4);
INSERT INTO TAIKHOAN (TK_STK,TK_PIN,TK_SODU,KH_CIF,LTK_ID,CN_ID)
	VALUES('051000000201','782334',1000000,'10000002',2,5);


/*Dang nhap*/

delimiter $$
create function KT_DN (ID varchar(10) , MK varchar(20))
returns int
begin
	declare val int; 
	set val = (select count(*) from QUANTRI  where BINARY QT_ID=ID and BINARY QT_MK=MK);
	return val;
end$$


/*Quan ly Tai Khoan*/ 
  /* LAP TAI KHOAN MOI */
 -- Load combobox Chi Nhanh
delimiter $$
CREATE PROCEDURE LOAD_CHI_NHANH()
BEGIN
	SELECT * FROM CHINHANH;
END
$$
 -- Lay Ma Loai Chi Nhanh theo Ten
delimiter $$
CREATE FUNCTION LAY_MA_CN(TEN VARCHAR(50))
RETURNS INT
BEGIN
	DECLARE MA INT;
	SET MA = (SELECT CN_ID FROM CHINHANH WHERE CN_TEN=TEN);
	RETURN MA;
END
$$
 -- Load combobox Loai Tai Khoan
delimiter $$
CREATE PROCEDURE LOAD_LOAI_TK()
BEGIN
	SELECT * FROM LOAITAIKHOAN;
END
$$
 -- Lay Ma LTK theo Ten
delimiter $$
CREATE FUNCTION LAY_MA_LTK(TEN VARCHAR(50))
RETURNS INT
BEGIN
	DECLARE MA INT;
	SET MA = (SELECT LTK_ID FROM LOAITAIKHOAN WHERE LTK_TEN=TEN);
	RETURN MA;
END
$$
 -- Tim CIF va Ten khach hang thong qua CMND
delimiter $$
CREATE PROCEDURE TIM_KH_CMND(IN CMND VARCHAR(9))
BEGIN
	IF EXISTS (SELECT * FROM KHACHHANG WHERE KH_CMND = CMND)
		THEN
			SELECT KH_CIF,KH_HOTEN FROM KHACHHANG WHERE KH_CMND=CMND;
	END IF;
END
$$
 -- Dem so luong tai khoan co cung khach hang
delimiter $$
CREATE FUNCTION SO_LUONG_TK(CIF INT)
RETURNS INT
BEGIN
	DECLARE COUNT INT;
	SET COUNT = (SELECT COUNT(*) FROM TAIKHOAN WHERE KH_CIF=CIF);
	RETURN COUNT;
END
$$

delimiter $$
CREATE PROCEDURE LAP_TAI_KHOAN(IN STK VARCHAR(20) ,IN PIN VARCHAR(6),IN SODU DOUBLE,IN CIF VARCHAR(10),IN LTK INT,IN CN INT)
BEGIN
	INSERT INTO TAIKHOAN (TK_STK,TK_PIN,TK_SODU,KH_CIF,LTK_ID,CN_ID)
	VALUES(STK,PIN,SODU,CIF,LTK,CN);
END
$$

  /* DANH SACH TAI KHOAN */
 -- Lay danh sach tai khoan
delimiter $$
CREATE PROCEDURE DS_TK()
BEGIN
	SELECT * FROM TAIKHOAN;
END
$$
 -- Doi ma PIN
delimiter $$
CREATE PROCEDURE DOI_PIN(IN ID int,IN PIN VARCHAR(6))
BEGIN
	IF EXISTS (SELECT * FROM TAIKHOAN WHERE TK_ID = ID)
	THEN
		UPDATE TAIKHOAN SET TK_PIN = PIN WHERE TK_ID = ID;
	END IF;
END
$$
 -- Lay thong tin tai khoan
delimiter $$
CREATE PROCEDURE LAY_THONG_TIN_TK(IN ID INT)
BEGIN
	IF EXISTS (SELECT * FROM TAIKHOAN WHERE TK_ID = ID)
	THEN
		SELECT TK_ID,TK_STK,TK_PIN,TK_SODU,KH_HOTEN,KH_CMND,LTK_TEN,CN_TEN FROM TAIKHOAN TK 
			INNER JOIN LOAITAIKHOAN LTK
			ON TK.LTK_ID=LTK.LTK_ID
			INNER JOIN CHINHANH CN
			ON TK.CN_ID=CN.CN_ID
			INNER JOIN KHACHHANG KH
			ON TK.KH_CIF=KH.KH_CIF WHERE TK_ID = ID;
	END IF;
END
$$
delimiter $$
 -- Lay thong tin tai khoan dua theo CMND
CREATE PROCEDURE LAY_THONG_TIN_TK_CMND(IN CMND VARCHAR(9))
BEGIN
	SELECT TK_ID,TK_STK,TK_PIN,TK_SODU,KH_HOTEN,LTK_TEN,CN_TEN FROM TAIKHOAN TK 
		INNER JOIN LOAITAIKHOAN LTK
		ON TK.LTK_ID=LTK.LTK_ID
		INNER JOIN CHINHANH CN
		ON TK.CN_ID=CN.CN_ID	
		INNER JOIN KHACHHANG KH
		ON TK.KH_CIF=KH.KH_CIF WHERE KH_CMND = CMND;
END
$$

 -- Lay thong tin tai khoan dua theo STK
delimiter $$
CREATE PROCEDURE LAY_THONG_TIN_TK_STK(IN STK VARCHAR(20))
BEGIN
	SELECT TK_ID,TK_STK,TK_PIN,TK_SODU,KH_HOTEN,LTK_TEN,CN_TEN FROM TAIKHOAN TK 
		INNER JOIN LOAITAIKHOAN LTK
		ON TK.LTK_ID=LTK.LTK_ID
		INNER JOIN CHINHANH CN
		ON TK.CN_ID=CN.CN_ID	
		INNER JOIN KHACHHANG KH
		ON TK.KH_CIF=KH.KH_CIF WHERE TK_STK = STK;
END
$$

 -- Rut het tien trong tai khoan
delimiter $$
CREATE PROCEDURE RUT_HET_TIEN(IN ID INT)
BEGIN
	IF EXISTS (SELECT * FROM TAIKHOAN WHERE TK_ID=ID)
	THEN
		UPDATE TAIKHOAN SET TK_SODU = TK_SODU - TK_SODU WHERE TK_ID = ID ;
	END IF;
END
$$

 -- Dong Tai Khoan
delimiter $$
CREATE PROCEDURE DONG_TAI_KHOAN(IN ID INT)
BEGIN
	IF EXISTS (SELECT * FROM TAIKHOAN WHERE TK_ID=ID)
	THEN
		DELETE FROM TAIKHOAN WHERE TK_ID=ID;
	END IF;
END
$$


  /*QUAN LY LOAI TAI KHOAN */
-- lay danh sach loai tai khoan
delimiter $$
CREATE PROCEDURE DS_LOAI_TK()
BEGIN
	SELECT * FROM LOAITAIKHOAN;
END
$$

-- Them loai tai khoan
delimiter $$
CREATE PROCEDURE THEM_LOAI_TK(TEN VARCHAR(50))
BEGIN
	INSERT INTO LOAITAIKHOAN(LTK_TEN) VALUES(TEN);
END
$$

-- Kiem tra trung ten loai tai khoan
delimiter $$
CREATE FUNCTION KT_LTK(TEN VARCHAR(50))
RETURNS INT
BEGIN
	IF EXISTS (SELECT * FROM LOAITAIKHOAN WHERE LTK_TEN = TEN)
	THEN
		RETURN 0;
	END IF;
	RETURN 1;
END
$$

-- Sua loai tai khoan
delimiter $$
CREATE PROCEDURE SUA_LOAI_TK(IN ID INT , TEN VARCHAR(50))
BEGIN
	IF EXISTS (SELECT * FROM LOAITAIKHOAN WHERE LTK_ID=ID)
	THEN
		UPDATE LOAITAIKHOAN SET LTK_TEN = TEN WHERE LTK_ID=ID;
	END IF;
END
$$

-- Xoa loai tai khoan
delimiter $$
CREATE PROCEDURE XOA_LOAI_TK(IN ID INT)
BEGIN
	IF EXISTS (SELECT * FROM LOAITAIKHOAN WHERE LTK_ID=ID)
	THEN
		DELETE FROM LOAITAIKHOAN WHERE LTK_ID=ID;
	END IF;
END
$$

/*QUAN LY CHI NHANH */
-- lay danh sach chi nhanh
delimiter $$
CREATE PROCEDURE DS_CN()
BEGIN
	SELECT * FROM CHINHANH;
END
$$

-- Kiem tra trung ten chi nhanh
delimiter $$
CREATE FUNCTION KT_CN(TEN VARCHAR(50))
RETURNS INT
BEGIN
	IF EXISTS (SELECT * FROM CHINHANH WHERE CN_TEN = TEN)
	THEN
		RETURN 0;
	END IF;
	RETURN 1;
END
$$

-- Them chi nhanh
delimiter $$
CREATE PROCEDURE THEM_CN(TEN VARCHAR(50))
BEGIN
	INSERT INTO CHINHANH(CN_TEN) VALUES(TEN);
END
$$

-- Sua chi nhanh
delimiter $$
CREATE PROCEDURE SUA_CN(IN ID INT , TEN VARCHAR(50))
BEGIN
	IF EXISTS (SELECT * FROM CHINHANH WHERE CN_ID=ID)
	THEN
		UPDATE CHINHANH SET CN_TEN = TEN WHERE CN_ID=ID;
	END IF;
END
$$

-- Xoa chi nhanh
delimiter $$
CREATE PROCEDURE XOA_CN(IN ID INT)
BEGIN
	IF EXISTS (SELECT * FROM CHINHANH WHERE CN_ID=ID)
	THEN
		DELETE FROM CHINHANH WHERE CN_ID=ID;
	END IF;
END
$$

/*RUT TIEN */
 -- Tim tai khoan theo CMND
delimiter $$
CREATE PROCEDURE TIM_TK_CMND(IN CMND VARCHAR(9))
BEGIN
	IF EXISTS (SELECT COUNT(*) FROM TAIKHOAN TK 
			   INNER JOIN KHACHHANG KH 
			   ON TK.KH_CIF= KH.KH_CIF WHERE KH_CMND=CMND )
	THEN
		SELECT TK_STK,TK_SODU,KH_HOTEN,LTK_TEN FROM TAIKHOAN TK 
			INNER JOIN KHACHHANG KH
			ON TK.KH_CIF = KH.KH_CIF
			INNER JOIN LOAITAIKHOAN LTK
			ON TK.LTK_ID = LTK.LTK_ID
			WHERE KH_CMND = CMND;
	END IF;
END
$$



 -- Tim tai khoan theo STK
delimiter $$
CREATE PROCEDURE TIM_TK_STK(IN STK VARCHAR(20))
BEGIN
	IF EXISTS (SELECT COUNT(*) FROM TAIKHOAN WHERE TK_STK=STK)
	THEN
		SELECT KH_CMND,TK_SODU,KH_HOTEN,LTK_TEN FROM TAIKHOAN TK 
			INNER JOIN KHACHHANG KH
			ON TK.KH_CIF = KH.KH_CIF
			INNER JOIN LOAITAIKHOAN LTK
			ON TK.LTK_ID = LTK.LTK_ID
			WHERE TK_STK = STK;
	END IF;
END
$$

-- Rut tien
delimiter $$
CREATE PROCEDURE RUT_TIEN(IN STK VARCHAR(20),IN SO_TIEN DECIMAL ,OUT STATUS INT)
BEGIN
	DECLARE SODU DECIMAL;
	DECLARE LTK INT;
	SET SODU = (SELECT TK_SODU FROM TAIKHOAN WHERE TK_STK = STK);
	SET LTK = (SELECT LTK_ID FROM TAIKHOAN WHERE TK_STK = STK);
	SET STATUS = 0;
	IF (LTK = 2)
	THEN
		IF (SODU - SO_TIEN) >= -10000000
		THEN
			UPDATE TAIKHOAN SET TK_SODU =   SODU - SO_TIEN WHERE  TK_STK = STK ;
			SET STATUS = 1;
		ELSE
			SET STATUS = 2;
		END IF;
	ELSE
		IF (SODU - SO_TIEN) >= 50000
		THEN
			UPDATE TAIKHOAN SET TK_SODU =   SODU - SO_TIEN WHERE  TK_STK = STK ;
			SET STATUS = 1;
		END IF;
	END IF;
	
END
$$



/*CHUYEN TIEN*/
-- Chuyen tien
delimiter $$
CREATE PROCEDURE CHUYEN_TIEN(IN STK_GUI VARCHAR(20) , IN STK_NHAN VARCHAR(20) , IN SO_TIEN DECIMAL , OUT STATUS INT)
BEGIN
	DECLARE SODU_GUI DECIMAL;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN	
    ROLLBACK;
	SET STATUS = 0;
END;
    START TRANSACTION;
	SET SODU_GUI = (SELECT TK_SODU FROM TAIKHOAN WHERE TK_STK = STK_GUI);
	
	IF(SODU_GUI - SO_TIEN >=50000)
		THEN
			UPDATE TAIKHOAN SET TK_SODU = TK_SODU - SO_TIEN WHERE TK_STK=STK_GUI;
			UPDATE TAIKHOAN SET TK_SODU = TK_SODU + SO_TIEN WHERE TK_STK=STK_NHAN;
			COMMIT;
			SET STATUS = 1;
		ELSE
			SET STATUS = 2;
			ROLLBACK;
		END IF;
END
$$

/*QUAN LY KHACH HANG*/
-- DANH SACH KHACH HANG

delimiter $$
CREATE PROCEDURE DS_KH()
BEGIN
	SELECT * FROM KHACHHANG;
END
$$

-- THEM TT KHACH HANG C2 (NGAY SINH KIEU STRINGS)----------------------------------
delimiter $$
CREATE PROCEDURE them_tt_t(in HOTEN VARCHAR(100) ,
 in CMND VARCHAR(9) , in NGAYSINH VARCHAR(20) ,in DIACHI VARCHAR(100) )
 begin
 insert into khachhang(KH_HOTEN,KH_CMND,KH_NGAYSINH,KH_DIACHI)
 value (HOTEN,CMND,NGAYSINH,DIACHI);
 end$$

-- XOA TT KHACH HANG ------------------------------------------------------------------
delimiter $$
CREATE PROCEDURE xoa_tt(
in CIF int)
BEGIN 
DELETE FROM khachhang
WHERE KH_CIF=CIF;
END $$

-- UPDATES KHACH HANG -----------------------------------------------------------------

delimiter $$
CREATE PROCEDURE update_tt_t(
in CIF int,in HOTEN VARCHAR(100) ,
 in CMND VARCHAR(9) , in NGAYSINH varchar(20) ,in DIACHI VARCHAR(100))
BEGIN 
UPDATE khachhang
SET KH_HOTEN =HOTEN, KH_CMND=CMND,KH_NGAYSINH=NGAYSINH,KH_DIACHI=DIACHI
WHERE KH_CIF=CIF;
END $$

/*NAP TIEN*/
-- nap tien
delimiter $$
CREATE PROCEDURE NAP_TIEN(IN STK VARCHAR(20),IN SO_TIEN DOUBLE )
BEGIN
	DECLARE SODU INT;
    SET SODU = (SELECT TK_SODU FROM TAIKHOAN WHERE TK_STK=STK);
    IF EXISTS (SELECT * FROM TAIKHOAN WHERE TK_STK = STK)
	THEN
	UPDATE TAIKHOAN SET TK_SODU = SODU + SO_TIEN WHERE  TK_STK = STK ;
    END IF;
END$$

