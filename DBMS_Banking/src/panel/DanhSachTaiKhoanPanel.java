/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panel;

import connection.Connect;
import frame.MainFrame;
import java.awt.Dimension;
import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.TaiKhoan;

/**
 *
 * @author 84965
 */
public class DanhSachTaiKhoanPanel extends javax.swing.JPanel {

    Connect connect = new Connect();
    Connection conn = connect.getConnection();
    DecimalFormat decimalFormat = new DecimalFormat("###,###,###");
    BigDecimal balance = new BigDecimal(0);
    /**
     * Creates new form QuanLyTaiKhoanPanel
     */
    JPanel childPanel;

    public DanhSachTaiKhoanPanel() {
        initComponents();
        loadTable();
        this.setPreferredSize(new Dimension(668, 445));
    }

    private ArrayList<TaiKhoan> getListTK() {
        ArrayList<TaiKhoan> list = new ArrayList<>();
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
            cs = conn.prepareCall("{call DS_TK()}");
            rs = cs.executeQuery();
            while (rs.next()) {
                int id = rs.getInt("TK_ID");
                String stk = rs.getString("TK_STK");
                String pin = rs.getString("TK_PIN");
                BigDecimal sodu = rs.getBigDecimal("TK_SODU");
                int cif = rs.getInt("KH_CIF");
                int ltk = rs.getInt("LTK_ID");
                int cn = rs.getInt("CN_ID");
                list.add(new TaiKhoan(id, stk, pin, sodu, cif, ltk, cn));
            }
        } catch (SQLException ex) {
            Logger.getLogger(LapTaiKhoanMoiPanel.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
//giải phóng tài nguyên khi không sử dụng nữa
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException sqlEx) {
                } //đoạn mã xử lý ng/lệ
                rs = null;
            }
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException sqlEx) {
                } //đoạn mã xử lý ng/lệ
                cs = null;
            }
        }
        return list;
    }

    private void loadTable() {
        String[] titles = {"ID", "Số tài khoản", "Mã PIN", "Số dư", "Mã khách hàng", "Loại tài khoản", "Chi nhánh"};
        DefaultTableModel model = new DefaultTableModel(titles, 0);
        ArrayList<TaiKhoan> list = getListTK();
        for (int i = 0; i < list.size(); i++) {
            Vector row = new Vector();
            row.add(list.get(i).getTK_ID());
            row.add(list.get(i).getTK_STK());
            row.add(list.get(i).getTK_PIN());
            row.add(list.get(i).getTK_Sodu());
            row.add(list.get(i).getKH_CIF());
            row.add(list.get(i).getLTK_ID());
            row.add(list.get(i).getCN_ID());
            model.addRow(row);
        }
        tbTaiKhoan.setDefaultEditor(Object.class, null);
        tbTaiKhoan.setModel(model);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbTaiKhoan = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtChuTaiKhoan = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtLoaiThe = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnTim = new javax.swing.JButton();
        txtPIN = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtSTK = new javax.swing.JTextField();
        btnPIN = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtCMND = new javax.swing.JTextField();
        btnDongTK = new javax.swing.JButton();
        txtChiNhanh = new javax.swing.JTextField();
        txtSoDu = new javax.swing.JTextField();

        setBackground(new java.awt.Color(242, 242, 242));

        tbTaiKhoan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbTaiKhoan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbTaiKhoanMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tbTaiKhoan);

        jLabel1.setText("Chứng minh thư :");

        jLabel2.setText("Số tài khoản :");

        txtChuTaiKhoan.setEnabled(false);

        jLabel3.setText("Chủ tài khoản :");

        jLabel4.setText("Loại thẻ : ");

        txtLoaiThe.setEnabled(false);

        jLabel5.setText("Mã PIN : ");

        jLabel6.setText("Số dư : ");

        btnTim.setText("Tìm");
        btnTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimActionPerformed(evt);
            }
        });

        txtPIN.setEnabled(false);

        jLabel8.setText("Chi nhánh :");

        txtSTK.setEnabled(false);

        btnPIN.setText("Đổi PIN");
        btnPIN.setEnabled(false);
        btnPIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPINActionPerformed(evt);
            }
        });

        jLabel9.setText("Mã tài khoản :");

        txtID.setEnabled(false);

        btnDongTK.setText("Đóng tài khoản");
        btnDongTK.setEnabled(false);
        btnDongTK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDongTKActionPerformed(evt);
            }
        });

        txtChiNhanh.setEnabled(false);

        txtSoDu.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel9))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtID)
                            .addComponent(txtSTK, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCMND, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPIN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnPIN, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(btnTim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtLoaiThe, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtChuTaiKhoan, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSoDu, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(txtChiNhanh))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDongTK, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(btnTim)
                        .addComponent(txtCMND, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(txtPIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPIN)
                    .addComponent(txtSTK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(btnDongTK)
                    .addComponent(txtChuTaiKhoan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoDu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8)
                    .addComponent(txtLoaiThe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtChiNhanh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void tbTaiKhoanMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbTaiKhoanMousePressed
        // TODO add your handling code here:
        int row = tbTaiKhoan.getSelectedRow();
        int column = 0;
        int id = (int) tbTaiKhoan.getValueAt(row, column);

        // lấy thông tin tài khoản dựa vào ID
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
            cs = conn.prepareCall("{call LAY_THONG_TIN_TK(?)}");
            cs.setInt(1, id);
            rs = cs.executeQuery();
            if (rs.first()) {
                txtID.setText(id + "");
                txtSTK.setText(rs.getString("TK_STK"));
                txtPIN.setText(rs.getString("TK_PIN"));
                txtSoDu.setText(decimalFormat.format(rs.getBigDecimal("TK_SODU")) + " đ");
                balance = rs.getBigDecimal("TK_SODU");
                txtChuTaiKhoan.setText(rs.getString("KH_HOTEN"));
                txtCMND.setText(rs.getString("KH_CMND"));
                txtLoaiThe.setText(rs.getString("LTK_TEN"));
                txtChiNhanh.setText(rs.getString("CN_TEN"));
                btnPIN.setEnabled(true);
                btnDongTK.setEnabled(true);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Số tài khoản không đúng");
        } finally {
//giải phóng tài nguyên khi không sử dụng nữa
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException sqlEx) {
                } //đoạn mã xử lý ng/lệ
                rs = null;
            }
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException sqlEx) {
                } //đoạn mã xử lý ng/lệ
                cs = null;
            }
        }
    }//GEN-LAST:event_tbTaiKhoanMousePressed

    private void getSTKDialog(String stk_list[]) {
        final JComboBox<String> combo = new JComboBox<>(stk_list);
        String[] options = {"Xác nhận", "Trở về"};
        String title = "Chọn tài khoản";
        int selection = JOptionPane.showOptionDialog(null, combo, title,
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options,
                options[0]);

        if (selection >= 0) {
            if (options[selection].equals("Xác nhận")) {
                String stk = combo.getSelectedItem().toString();
                if (stk != null) {
                    CallableStatement cs = null;
                    ResultSet rs = null;
                    try {
                        cs = conn.prepareCall("{call LAY_THONG_TIN_TK_STK(?)}");
                        cs.setString(1, stk);
                        rs = cs.executeQuery();
                        while (rs.next()) {
                            txtSTK.setText(stk);
                            txtID.setText(rs.getString("TK_ID"));
                            txtPIN.setText(rs.getString("TK_PIN"));
                            txtSoDu.setText(decimalFormat.format(rs.getBigDecimal("TK_SODU")) + " đ");
                            balance = rs.getBigDecimal("TK_SODU");
                            txtChuTaiKhoan.setText(rs.getString("KH_HOTEN"));
                            txtLoaiThe.setText(rs.getString("LTK_TEN"));
                            txtChiNhanh.setText(rs.getString("CN_TEN"));
                            btnPIN.setEnabled(true);
                            btnDongTK.setEnabled(true);
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Số tài khoản không đúng");
                    }

                }
            }
        }
    }

    private void getDongTKDialog() {
        String[] options = {"Xác nhận", "Hủy"};
        String title = "Xác nhận đóng tài khoản";
        String content = "Bạn chắc chắn muốn đóng tài khoản: " + txtSTK.getText();
        int selection = JOptionPane.showOptionDialog(null, content, title,
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options,
                options[1]);
        if (selection >= 0) {
            if (options[selection].equals("Xác nhận")) {
                CallableStatement cs = null;
                try {
                    int id = Integer.parseInt(txtID.getText());
                    cs = conn.prepareCall("{call DONG_TAI_KHOAN(?)}");
                    cs.setInt(1, id);
                    if (cs.executeUpdate() > 0) {
                        JOptionPane.showMessageDialog(this, "Đóng tài khoản thành công");
                        txtCMND.setText("");
                        txtID.setText("");
                        txtSTK.setText("");
                        txtPIN.setText("");
                        txtChuTaiKhoan.setText("");
                        txtLoaiThe.setText("");
                        txtChiNhanh.setText("");
                        txtSoDu.setText("");
                        btnPIN.setEnabled(false);
                        btnDongTK.setEnabled(false);
                        loadTable();
                    } else {
                        JOptionPane.showMessageDialog(this, "Có lỗi xảy ra");
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Số tài khoản không đúng");
                } finally {
                    //giải phóng tài nguyên khi không sử dụng nữa
                    if (cs != null) {
                        try {
                            cs.close();
                        } catch (SQLException sqlEx) {
                        } //đoạn mã xử lý ng/lệ
                        cs = null;
                    }
                }
            }
        }
    }

    private void getRutTienDialog() {
        String[] options = {"Xác nhận", "Hủy"};
        String title = "Rút hết tiền trong tài khoản";
        String content = "Bạn phải rút hết tiền để có thể đóng tài khoản" + "\nSố tiền còn lại :" + txtSoDu.getText()+ "\nBạn có muốn rút hết toàn bộ ?";
        int selection = JOptionPane.showOptionDialog(null, content, title,
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options,
                options[1]);
        if (selection >= 0) {
            if (options[selection].equals("Xác nhận")) {
                CallableStatement cs = null;
                try {
                    int id = Integer.parseInt(txtID.getText());
                    cs = conn.prepareCall("{call RUT_HET_TIEN(?)}");
                    cs.setInt(1, id);
                    if (cs.executeUpdate() > 0) {
                        JOptionPane.showMessageDialog(this, "Rút tiền thành công");
                        txtSoDu.setText(0.0 + "");
                        balance = new BigDecimal(0);
                        loadTable();
                    } else {
                        JOptionPane.showMessageDialog(this, "Có lỗi xảy ra");
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Số tài khoản không đúng");
                } finally {
                    //giải phóng tài nguyên khi không sử dụng nữa
                    if (cs != null) {
                        try {
                            cs.close();
                        } catch (SQLException sqlEx) {
                        } //đoạn mã xử lý ng/lệ
                        cs = null;
                    }
                }
            }
        }
    }
    private void btnTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimActionPerformed
        // TODO add your handling code here:
        CallableStatement cs = null;
        ResultSet rs = null;
        if (!txtCMND.getText().equals("")) {
            try {
                String cmnd = txtCMND.getText();
                cs = conn.prepareCall("{call LAY_THONG_TIN_TK_CMND(?)}");
                cs.setString(1, cmnd);
                rs = cs.executeQuery();
                int count = 0;
                rs.last();
                count = rs.getRow();
                if (count > 1) {
                    rs.first();
                    String[] arr = new String[count];
                    int i = 0;
                    arr[i] = rs.getString("TK_STK");
                    while (rs.next()) {
                        i++;
                        arr[i] = rs.getString("TK_STK");
                    }
                    getSTKDialog(arr);
                } else {
                    if (rs.first()) {
                        txtID.setText(rs.getString("TK_ID"));
                        txtSTK.setText(rs.getString("TK_STK"));
                        txtPIN.setText(rs.getString("TK_PIN"));
                        txtSoDu.setText(decimalFormat.format(rs.getBigDecimal("TK_SODU")) + " đ");
                        balance = rs.getBigDecimal("TK_SODU");
                        txtChuTaiKhoan.setText(rs.getString("KH_HOTEN"));
                        txtLoaiThe.setText(rs.getString("LTK_TEN"));
                        txtChiNhanh.setText(rs.getString("CN_TEN"));
                        btnPIN.setEnabled(true);
                        btnDongTK.setEnabled(true);
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Số chứng minh không đúng");
            } finally {
//giải phóng tài nguyên khi không sử dụng nữa
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException sqlEx) {
                    } //đoạn mã xử lý ng/lệ
                    rs = null;
                }
                if (cs != null) {
                    try {
                        cs.close();
                    } catch (SQLException sqlEx) {
                    } //đoạn mã xử lý ng/lệ
                    cs = null;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số chưng minh thư");
        }
    }//GEN-LAST:event_btnTimActionPerformed

    private void btnPINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPINActionPerformed
        // TODO add your handling code here:
        if (btnPIN.getText().equals("Lưu")) {
            //Đổi mã PIN
            CallableStatement cs = null;
            int id = Integer.parseInt(txtID.getText());
            int num = 0;
            try {
                num = Integer.parseInt(txtPIN.getText());
                if (txtPIN.getText().length() == 6) {
                    try {
                        cs = conn.prepareCall("{call DOI_PIN(?,?)}");
                        cs.setInt(1, id);
                        cs.setString(2, txtPIN.getText());
                        if (cs.executeUpdate() > 0) {
                            JOptionPane.showMessageDialog(this, "Đổi mã pin thành công");
                            btnPIN.setText("Đổi PIN");
                            txtPIN.setEnabled(false);
                            loadTable();
                        } else {
                            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra");
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Số tài khoản không đúng");
                    } finally {
                        //giải phóng tài nguyên khi không sử dụng nữa
                        if (cs != null) {
                            try {
                                cs.close();
                            } catch (SQLException sqlEx) {
                            } //đoạn mã xử lý ng/lệ
                            cs = null;
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Mã PIN phải chứa 6 ký tự ");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Mã PIN phải là số");
            }

        } else {
            btnPIN.setText("Lưu");
            txtPIN.setEnabled(true);
        }
    }//GEN-LAST:event_btnPINActionPerformed
    private double convertDecimalToDouble(BigDecimal money) {
        return Double.parseDouble(money.toString());
    }

    private void btnDongTKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDongTKActionPerformed
        // TODO add your handling code here:
        if (convertDecimalToDouble(balance) > 0) {
            getRutTienDialog();
        } else {
            getDongTKDialog();
        }

    }//GEN-LAST:event_btnDongTKActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDongTK;
    private javax.swing.JButton btnPIN;
    private javax.swing.JButton btnTim;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbTaiKhoan;
    private javax.swing.JTextField txtCMND;
    private javax.swing.JTextField txtChiNhanh;
    private javax.swing.JTextField txtChuTaiKhoan;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtLoaiThe;
    private javax.swing.JTextField txtPIN;
    private javax.swing.JTextField txtSTK;
    private javax.swing.JTextField txtSoDu;
    // End of variables declaration//GEN-END:variables

}
